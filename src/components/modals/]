<template>

<div class="absolute top-0 left-0 w-full h-full bg-black bg-opacity-40"
	@click="closeModalClick"
>
</div>

<transition 
	enter-active-class="transition ease-out duration-200" 
	enter-from-class="opacity-0 translate-y-1 scale-90" 
	enter-to-class="opacity-100 translate-y-0 scale-100" 
	leave-active-class="transition ease-in duration-1000" 
	leave-from-class="translate-y-0 scale-100" 
	leave-to-class="translate-y-1 scale-0"
>
	<div 
	v-if="is_mounted"
	class="absolute w-11/12 bg-white rounded-lg top-1/2 -translate-y-1/2 -translate-x-1/2 left-1/2 max-w-[600px]">
		<div class="flex flex-col items-center px-5 py-8 md:px-12">

				
			<!-- user login -->
			<user-login-component
				v-if="user_login_info_local.user_authorize_state == 'NEED_LOGIN'"
				@user-login="tryUserLogin"
				@user-login-info="updateUserLoginInfo"
				:userLoginInfo="user_login_info_local"
				@toast-error="errorToast"
				@toast-success="successToast"
			/>
			<!-- eof user login -->

			<!-- user register -->
			<user-register-component
				v-if="user_login_info_local.user_authorize_state == 'NEED_REGISTER'"
				@user-login-info="updateUserLoginInfo"
				@user-register="tryUserRegister"
				:userLoginInfo="user_login_info_local"
				@toast-error="errorToast"
				@toast-success="successToast"
			/>
			<!-- user register -->

		</div>
	</div>
		

</transition>
	

</template>

<script lang="ts">
import { onMounted, ref, reactive, defineComponent } from 'vue';
// toast import
import { createToast } from 'mosha-vue-toastify';

// import user login component
import UserLoginComponent from '@/components/login/UserLoginComponent.vue';
import UserRegisterComponent from '@/components/login/UserRegisterComponent.vue';

export default defineComponent({
	name: "UserAuthorizeModal",
	components: {
		UserLoginComponent,
		UserRegisterComponent,
	},
	props: {
		userLoginInfo: {
			type: Object,
			default: null,
		},
	},
	emits: ['close-modal', 'user-login-info'],
	setup (props, {emit}) {
		// toast 
		const inputErrorToast = (title: string) => {
			createToast(
				title, {
					'type': 'danger',
					'showIcon': true,
					'hideProgressBar': true,	
				}
			);
		};
		const inputSuccessToast = (title: string) => {
			createToast(
				title, {
					'type': 'success',
					'showIcon': true,
					'hideProgressBar': true,
				}
			);
		};

		var errorToast = (title) => inputErrorToast(title)
		var successToast =  (title) => inputSuccessToast(title)


		const is_mounted = ref(false)

		var user_login_info_local =  reactive(
			props.userLoginInfo
		)
		
		onMounted(() => {
			is_mounted.value = true
		})

		var closeModalClick = () => emit('close-modal')	
		var updateUserLoginInfo = () => emit("user-login-info", user_login_info_local)

		var updateUserLoginInfoLocal = (new_user_login_info) => {
			user_login_info_local = { ...new_user_login_info }
			updateUserLoginInfo()
		}

		var tryUserRegister = () => emit('user-register')


		return {
			// reactive
			user_login_info_local,
			// computed
			is_mounted,
			// functions
			closeModalClick,
			updateUserLoginInfo,
			tryUserRegister,
			errorToast,
			successToast,
		}
	}
});
</script>
